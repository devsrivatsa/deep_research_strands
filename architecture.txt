deepresearch-strands/
├── main.py                          # Application entry point
├── config.py                        # Configuration management
├── pyproject.toml
├── .env.example
├── uv.lock

# Domain Layer (Business Logic)
├── domain/
│   ├── __init__.py
│   ├── entities/                    # Core business entities
│   │   ├── __init__.py
│   │   ├── user.py                  # User aggregate
│   │   ├── project.py               # Project aggregate  
│   │   ├── research.py              # Research aggregate
│   │   └── query.py                 # Query value objects
│   ├── repositories/                # Repository interfaces (abstractions)
│   │   ├── __init__.py
│   │   ├── user_repository.py
│   │   ├── project_repository.py
│   │   └── research_repository.py
│   ├── services/                    # Domain services
│   │   ├── __init__.py
│   │   ├── research_orchestrator.py # Core research logic
│   │   ├── query_analyzer.py
│   │   └── plan_generator.py
│   └── events/                      # Domain events
│       ├── __init__.py
│       ├── research_started.py
│       ├── research_completed.py
│       └── user_registered.py

# Application Layer (Use Cases)
├── application/
│   ├── __init__.py
│   ├── use_cases/                   # Application use cases
│   │   ├── __init__.py
│   │   ├── auth/
│   │   │   ├── register_user.py
│   │   │   ├── login_user.py
│   │   │   └── logout_user.py
│   │   ├── projects/
│   │   │   ├── create_project.py
│   │   │   ├── get_projects.py
│   │   │   └── archive_project.py
│   │   └── research/
│   │       ├── start_research.py
│   │       ├── get_research_status.py
│   │       └── cancel_research.py
│   ├── dto/                         # Data Transfer Objects
│   │   ├── __init__.py
│   │   ├── auth_dto.py
│   │   ├── project_dto.py
│   │   └── research_dto.py
│   └── interfaces/                  # Application interfaces
│       ├── __init__.py
│       ├── auth_service.py
│       ├── notification_service.py
│       └── external_apis.py

# Infrastructure Layer (External Concerns)
├── infrastructure/
│   ├── __init__.py
│   ├── database/                    # Database implementations
│   │   ├── __init__.py
│   │   ├── models/                  # SQLAlchemy models
│   │   │   ├── __init__.py
│   │   │   ├── user_model.py
│   │   │   ├── project_model.py
│   │   │   └── research_model.py
│   │   ├── repositories/            # Repository implementations
│   │   │   ├── __init__.py
│   │   │   ├── user_repository_impl.py
│   │   │   ├── project_repository_impl.py
│   │   │   └── research_repository_impl.py
│   │   └── migrations/              # Alembic migrations
│   ├── external_apis/               # External API clients
│   │   ├── __init__.py
│   │   ├── google_api.py
│   │   ├── exa_api.py
│   │   └── ncbi_api.py
│   ├── auth/                        # Authentication implementations
│   │   ├── __init__.py
│   │   ├── jwt_service.py
│   │   └── password_service.py
│   └── monitoring/                  # Observability
│       ├── __init__.py
│       ├── langfuse_client.py
│       └── metrics.py

# Presentation Layer (API/UI)
├── api/
│   ├── __init__.py
│   ├── main.py                      # FastAPI app setup
│   ├── dependencies.py              # Dependency injection
│   ├── middleware.py                # Auth, CORS, etc.
│   ├── routes/                      # API endpoints
│   │   ├── __init__.py
│   │   ├── auth.py
│   │   ├── projects.py
│   │   ├── research.py
│   │   └── health.py
│   └── schemas/                     # Pydantic request/response models
│       ├── __init__.py
│       ├── auth_schemas.py
│       ├── project_schemas.py
│       └── research_schemas.py

# AI Agents (Keep as-is, integrate as domain services)
├── agents/
│   ├── research_orchestrator/       # Your existing agent structure
│   │   ├── agent.py
│   │   ├── prompt.py
│   │   ├── state.py
│   │   └── sub_agents/
│   └── report_writer/

# Configuration & Environment
├── config/
│   ├── base.yml
│   ├── dev.yml
│   └── prod.yml

# Frontend (unchanged)
├── ui/
└── langfuse/
