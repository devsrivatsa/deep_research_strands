deepresearch-strands/
├── config.py                        # Configuration management (Langfuse keys, tracing flags)
├── architecture_with_events.txt     # This document
├── docs/                            # Development history and phase summaries
│   ├── phase1_completion_summary.md
│   ├── phase2_websocket_integration_summary.md
│   └── phase3_agent_integration_summary.md

# Domain Layer (Business Logic) - Event-Driven
├── domain/
│   ├── __init__.py
│   ├── entities/                    # Core business entities (Pydantic models)
│   │   ├── __init__.py
│   │   ├── user.py                  # User aggregate models
│   │   ├── project.py               # Project aggregate models
│   │   ├── research.py              # Research plan/result/value objects
│   │   └── query.py                 # Query analysis value objects
│   ├── events/                      # Domain Events and infrastructure contracts
│   │   ├── __init__.py
│   │   ├── base.py                  # DomainEvent, EventBus, EventHandler, InMemoryEventBus
│   │   ├── research_events.py       # Research session/task/report events
│   │   ├── workflow_events.py       # Workflow lifecycle (started/completed/failed/...)
│   │   ├── agent_events.py          # Agent execution/decision/tool-call events
│   │   ├── project_events.py        # Project events (present, extend as needed)
│   │   └── handlers/                # Domain event handlers
│   │       ├── __init__.py
│   │       ├── research_handlers.py # Progress, metrics, audit (in-memory)
│   │       └── langfuse_research_handlers.py # Langfuse-native tracking
│   ├── repositories/                # Repository interfaces (to be completed)
│   │   ├── __init__.py
│   │   ├── user_repository.py       # Interface (placeholder)
│   │   ├── project_repository.py    # Interface (placeholder)
│   │   ├── research_repository.py   # Interface (placeholder)
│   │   └── event_repository.py      # Interface (placeholder)
│   └── services/
│       ├── __init__.py
│       └── event_bus.py             # DomainEventBus abstraction

# Infrastructure Layer (External Concerns)
├── infrastructure/
│   ├── __init__.py
│   ├── events/
│   │   ├── __init__.py
│   │   └── simple_event_bus.py      # Simple event bus (concrete) with async handler dispatch
│   ├── observability/
│   │   ├── __init__.py
│   │   └── langfuse_telemetry_manager.py # Langfuse SDK v3 + OpenTelemetry integration
│   └── websockets/
│       ├── __init__.py
│       ├── fastapi_integration.py   # Example integration (sockets)
│       └── websocket_handlers.py    # Example handlers

# AI Agents (Event Integration)
├── agents/
│   ├── research_orchestrator/
│   │   ├── __init__.py
│   │   ├── agent.py                 # Orchestration; emits events via EventEmitter
│   │   ├── event_integration.py     # ResearchOrchestratorEventEmitter (domain events)
│   │   ├── sub_agents/
│   │   │   ├── human_feedback_manager/   # Human-in-the-loop agent (to redesign)
│   │   │   ├── query_analysis_workflow/  # Query analysis sub-workflow
│   │   │   ├── research_planner_agent/   # Plan generation tool
│   │   │   └── research_workflow/        # Execution workflow
│   └── report_writer/               # Report writer (placeholder)

# Presentation / API
├── examples/                        # Example scripts (incl. websockets)
│   ├── simplified_langfuse_example.py
│   ├── websocket_integration_example.py
│   └── phase3_agent_integration_example.py
└── ui/                              # Local React-based UI (tests and components)
    └── src/                         # Event-driven UI utilities, components, store

Notes on current state vs. planned components:
- Application layer (use-cases, DTOs, service ports) is not yet present. This will be introduced in Phase 4.
- Database models and repository implementations are not present yet; only repository interfaces exist in `domain/repositories`.
- FastAPI API surface is not implemented; websocket examples exist. Phase 4 will introduce minimal API endpoints for projects/users/research.
- MCP integration is not planned. Phase 3B advanced multi-agent features are explicitly out of scope.

# Key Event Flow Integration Points (as-built)
1) `agents/research_orchestrator/agent.py` → emits via `agents/research_orchestrator/event_integration.py` into `EventBus`
2) `domain/events/handlers/research_handlers.py` and `.../langfuse_research_handlers.py` consume events for progress, metrics, and Langfuse
3) `infrastructure/events/simple_event_bus.py` dispatches events asynchronously to handlers
4) `infrastructure/observability/langfuse_telemetry_manager.py` provides tracing/observability; handlers use Langfuse SDK v3
5) `ui/` listens over websockets (example) for progress; Phase 4 to align UI with domain events

# Phase Alignment (see docs/)
- Phase 1 (foundation): Domain events base, entity models — complete
- Phase 2 (websocket integration): Streaming examples and UI scaffolding — complete
- Phase 3 (agent integration): Orchestrator emits workflow/agent events; Langfuse observability — complete
- Phase 3B (advanced multi-agent): NOT planned; current system intentionally retained
- Phase 4 (clean architecture hardening): Introduce application layer, repositories, services, and API; redesign `human_feedback_manager`
