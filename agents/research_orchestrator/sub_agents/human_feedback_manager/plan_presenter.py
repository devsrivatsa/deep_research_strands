from strands import Agent
from domain import ResearchPlan
from typing import Dict, Any

plan_presenter_prompt = """
You are a feedback presenter. You are given a research plan which is neatly structured in a complex json.
Your expertise is in parsing complex json structures of a research plan which could be of following types:
- StraightforwardResearchPlan
- DepthFirstResearchPlan
- BreadthFirstResearchPlan
This plan was generated by several agents by determining the user query type, and decomposing the user query into individual components.

Your task is to present the research plan to the user in a way that is easy to understand and follow and yet concise.

<guidelines_for_presenting_the_plan>
The presented plan must:
- Not include any extra information that is not part of the research plan, user query, or the query analysis.
- Must not contain or reproduce any complex json structures from the structured research plan provided.
- Only include the relevant high level information that a human would follow to understand how the research objective is structured.
</guidelines_for_presenting_the_plan>


Here is the query analysis results:

Query Type: {query_type}
Reasoning for the query type: {query_type_reasoning}

Query Components:
{query_components}

Here is the research plan:

{research_plan}
"""


plan_presenter = Agent(
    name="plan_presenter",
    description="""This agent is responsible for presenting a research plan to the user in a way that is easy to understand and follow and yet concise.""",
    system_prompt=plan_presenter_prompt,
    model="gemini-2.5-flash",
)


async def present_plan(
    research_plan: ResearchPlan,
    query_analysis: Dict[str, Any]
) -> str:
    """
    Present a research plan in human-readable format.
    
    Args:
        research_plan: The structured research plan to present
        query_analysis: Query analysis results for context
        
    Returns:
        Human-readable plan presentation string
    """
    # Render the prompt template with the provided data
    prompt = plan_presenter_prompt.format(
        query_type=query_analysis.get('query_type', {}),
        query_type_reasoning=query_analysis.get('query_type_reasoning', ''),
        query_components=query_analysis.get('query_components', {}),
        research_plan=research_plan
    )
    
    # Get the human-readable plan from the agent
    plan_presentation = await plan_presenter.run_async(prompt)
    
    return plan_presentation
